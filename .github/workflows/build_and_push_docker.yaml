name: "Build Docker Images"

on:
  workflow_call:
    inputs:
        image:
            type: string
            required: true
            description: Docker Image
        version:
            type: string
            required: true
            description: Version
        build_from:
            type: string
            required: true
            description: Original version to build from 
            default: ""
        build_comet_image:
            type: boolean
            required: true
            description: If to build a Comet integration image
            default: false
        comet_build_args:
            type: string
            required: false
            default: ""
            description: Arguments for cloud docker build
        push_latest:
            type: string
            required: true
            description: If to push docker image with latest tag
            default: "false"

env:
  DOCKER_REGISTRY: "ghcr.io/comet-ml/opik" 
  DOCKER_IMAGE: "ghcr.io/comet-ml/opik/${{ inputs.image }}:${{ inputs.version }}"

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    name: Build ${{ matrix.platform }} Image
    strategy:
      matrix:
        include:
          - platform: AMD64
            runner: ubuntu-latest
            arch: amd64
          - platform: ARM64
            runner: ubuntu-24.04-arm
            arch: arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          ref: ${{inputs.build_from}}

      - name: Save opik-sandbox-executor-python
        if: inputs.image == 'opik-python-backend'
        run: |
          docker pull ${{env.DOCKER_REGISTRY}}/opik-sandbox-executor-python:${{inputs.version}}
          docker save ${{env.DOCKER_REGISTRY}}/opik-sandbox-executor-python:${{inputs.version}} | gzip > opik-sandbox-executor-python.tar.gz
          
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{env.DOCKER_REGISTRY}}
          username: "github-actions"
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: apps/${{ inputs.image }}/.          
          platforms: linux/${{ matrix.arch }}
          file: apps/${{ inputs.image }}/Dockerfile
          push: true
          tags: ${{env.DOCKER_IMAGE }}-${{ matrix.arch }}
          build-args: |
            OPIK_VERSION=${{ inputs.version }}

      - name: Write to summary
        run: |
          echo "### ${{ matrix.platform }} Build Complete ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{env.DOCKER_IMAGE }}-${{ matrix.arch }}" >> $GITHUB_STEP_SUMMARY

  create-manifest:
    name: Create Multi-Architecture Manifest
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{env.DOCKER_REGISTRY}}
          username: "github-actions"
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and Push Version Tag
        run: |
          docker buildx imagetools create -t ${{env.DOCKER_IMAGE }} \
            ${{env.DOCKER_IMAGE }}-amd64 \
            ${{env.DOCKER_IMAGE }}-arm64

      - name: Create and Push Latest Tag
        if: inputs.push_latest == 'true' 
        run: |
          docker manifest create -t ${{env.DOCKER_IMAGE }}:latest \
            ${{env.DOCKER_IMAGE }}-amd64 \
            ${{env.DOCKER_IMAGE }}-arm64

      - name: Cleanup Temporary Tags
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true
        run: |
          # Get the full version ID and package name from the build step
          VERSION_ID="${{ inputs.version }}"
          PACKAGE_NAME="${{ inputs.image }}"
          
          # Loop through architectures
          for ARCH in "amd64" "arm64"; do
            # Get the version tag with architecture
            ARCH_TAG="${VERSION_ID}-${ARCH}"
            
            # First get the package version ID
            echo "Finding version ID for tag: ${ARCH_TAG}"
            FOUND_VERSION_ID=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/comet-ml/packages/container/opik/versions" \
              --jq ".[] | select(.metadata.container.tags[] | contains(\"${ARCH_TAG}\")) | .id" | tr -d '\n' | tr -d '\"')
            
            if [ -n "$FOUND_VERSION_ID" ] && [ "$FOUND_VERSION_ID" != "null" ]; then
              echo "Found version ID: $FOUND_VERSION_ID for tag: ${ARCH_TAG}"
              
              # Delete the version
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/comet-ml/packages/container/opik/versions/$FOUND_VERSION_ID" \
                && echo "✅ Successfully deleted version with ID: $FOUND_VERSION_ID (tag: ${ARCH_TAG})" \
                || echo "⚠️ Failed to delete version with ID: $FOUND_VERSION_ID (tag: ${ARCH_TAG}). Make sure you have the right permissions."
            else
              echo "⚠️ Could not find version ID for tag: ${ARCH_TAG}. The tag may not exist."
            fi
          done

      - name: Write to summary
        run: |
          echo "### Multi-Architecture Image Created ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{env.DOCKER_IMAGE }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ inputs.push_latest }}" == "true" ]]; then
            echo "- Latest Tag: ${{env.DOCKER_REGISTRY}}/${{ inputs.image }}:latest" >> $GITHUB_STEP_SUMMARY
          fi

  # build-n-push-image:
  #   runs-on: ubuntu-latest
  #   defaults:
  #       run:
  #         working-directory: apps/${{ inputs.image }}/
  #   steps:
  #       - name: Checkout
  #         uses: actions/checkout@v4.1.1
  #         with:
  #           ref: ${{inputs.build_from}}

  #       - name: Save opik-sandbox-executor-python
  #         if: inputs.image == 'opik-python-backend'
  #         run: |
  #           docker pull ${{env.DOCKER_REGISTRY}}/opik-sandbox-executor-python:${{inputs.version}}
  #           docker save ${{env.DOCKER_REGISTRY}}/opik-sandbox-executor-python:${{inputs.version}} | gzip > opik-sandbox-executor-python.tar.gz
            
  #       - name: Login to GHCR
  #         uses: docker/login-action@v3
  #         with:
  #           registry: ${{env.DOCKER_REGISTRY}}
  #           username: "github-actions"
  #           password: ${{ secrets.GITHUB_TOKEN }}

  #       - name: Build and Push Docker Image
  #         run: |
  #           # Create a new builder instance with docker-container driver
  #           docker buildx create --name multiarch-builder --driver docker-container --use

  #           DOCKER_IMAGE_NAME=${{env.DOCKER_REGISTRY}}/${{ inputs.image }}:${{inputs.version}}
  #           echo "DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}" | tee -a $GITHUB_ENV
  #           if [[ "${{inputs.push_latest}}" == "true" ]]; then
  #             DOCKER_IMAGE_NAME_LATEST=${{env.DOCKER_REGISTRY}}/${{ inputs.image }}:latest
  #             LATEST_TAG=" -t ${DOCKER_IMAGE_NAME_LATEST}"
  #           else
  #             LATEST_TAG=""
  #           fi
  #           echo "LATEST_TAG=${LATEST_TAG}"
  #           docker buildx build --platform linux/amd64,linux/arm64 --push \
  #           --build-arg OPIK_VERSION=${{inputs.version}} \
  #           -t ${DOCKER_IMAGE_NAME} ${LATEST_TAG} .
  #           echo "Docker image pushed: ${DOCKER_IMAGE_NAME}" >> $GITHUB_STEP_SUMMARY

  #       - name: Build and Push Docker Image for Comet integration
  #         if: inputs.build_comet_image 
  #         run: |
  #           DOCKER_IMAGE_NAME_COMET=${{env.DOCKER_REGISTRY}}/${{inputs.image}}-comet:${{inputs.version}}
  #           echo "DOCKER_IMAGE_NAME_COMET=${DOCKER_IMAGE_NAME_COMET}" | tee -a $GITHUB_ENV
  #           if [[ "${{inputs.push_latest}}" == "true" ]]; then
  #             DOCKER_IMAGE_NAME_COMET_LATEST=${{env.DOCKER_REGISTRY}}/${{ inputs.image }}-comet:latest
  #             LATEST_TAG=" -t ${DOCKER_IMAGE_NAME_COMET_LATEST}"
  #           else
  #             LATEST_TAG=""
  #           fi
  #           docker buildx build --platform linux/amd64,linux/arm64 --push \
  #           --build-arg ${{inputs.comet_build_args}}  \
  #           --build-arg OPIK_VERSION=${{inputs.version}} \
  #           --build-arg SENTRY_ENABLED=true \
  #           --build-arg SENTRY_DSN="${{secrets.OPIK_FE_SENTRY_DSN}}" \
  #           -t ${DOCKER_IMAGE_NAME_COMET} ${LATEST_TAG} .
  #           echo "Docker image pushed: ${DOCKER_IMAGE_NAME_COMET}" >> $GITHUB_STEP_SUMMARY
        